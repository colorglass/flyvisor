
import <std_connector.camkes>;
import <global-connectors.camkes>;
import <rx/rx.camkes>;
import <server/server.camkes>;
import <hwrng/hwrng.camkes>;

import <FileServer/FileServer.camkes>;

component UARTs {
    hardware;
    dataport Buf(4096) reg;
    emits UartIRQ irq;
}

component GPIO {
    hardware;
    dataport Buf(4096) reg;
}

component Timer{
    hardware;
    dataport Buf(4096) reg;
    emits TimerIRQ irq;
}

component DMA{
    hardware;
    dataport Buf(4096) reg;
    emits DMAIRQ irq0;
    emits DMAIRQ irq1;
}

assembly {
    composition {
        component UARTs uarts;
        component GPIO gpio;
        component Timer timer;
        component DMA dma;

        component Rx recv;
        component Server server;

        component HWRNG hwrng;
        component FileServer fsrv;

        // hardware connection
        connection seL4HardwareMMIO rx_uart_reg_conn(from recv.uart_reg, to uarts.reg);
        connection seL4HardwareInterrupt rx_irq_conn(from uarts.irq, to recv.uart_irq);
        connection seL4HardwareMMIO timer_reg_conn(from recv.timer_reg, to timer.reg);
        connection seL4HardwareInterrupt rx_timer_irq_conn(from timer.irq, to recv.timer_irq);
        connection seL4HardwareMMIO gpio_reg_conn(from recv.gpio_reg, to gpio.reg);
        connection seL4HardwareMMIO dma_reg_conn(from recv.dma_reg, to dma.reg);
        connection seL4HardwareInterrupt rx_dma_irq0_conn(from dma.irq0, to recv.dma_irq0);
        connection seL4HardwareInterrupt rx_dma_irq1_conn(from dma.irq1, to recv.dma_irq1);

        connection seL4HardwareMMIO server_uart_reg_conn(from server.uart_reg, to uarts.reg);
        connection seL4HardwareMMIO server_dma_reg_conn(from server.dma_reg, to dma.reg);

        // data buffer connection
        connection seL4SharedData gcs_buf_conn(from server.gcs_msg_buf, to recv.gcs_msg_buf);
        connection seL4SharedData fc_buf_conn(from server.fc_msg_buf, to recv.fc_msg_buf);
        connection seL4Notification gcs_data_ready_conn(from recv.gcs_ready, to server.gcs_ready);
        connection seL4Notification fc_data_ready_conn(from recv.fc_ready, to server.fc_ready);
        connection seL4NotificationNative data_timeout_conn(from recv.data_timeout, to server.data_timeout);

        // hwrng
        connection seL4DTBHardware hwrng_dtb_conn(from hwrng.dtb_src, to hwrng.dtb);
        connection seL4RPCCall rng_inf_conn(from server.rng, to hwrng.rng);

        connection seL4RPCDataport fs_conn(from server.fs, to fsrv.fs_ctrl);
    }

    configuration {
        uarts.reg_paddr = 0xfe201000;
        uarts.reg_size = 0x1000;
        uarts.irq_irq_number = 153;
        gpio.reg_paddr = 0xfe200000;
        gpio.reg_size = 0x1000;
        timer.reg_paddr = 0xfe003000;
        timer.reg_size = 0x1000;
        timer.irq_irq_number = 97;  // use the channel 1
        dma.reg_paddr = 0xfe007000;
        dma.reg_size = 0x1000;
        dma.irq0_irq_number = 112;
        dma.irq1_irq_number = 113;

        recv.priority = 254;
        hwrng.priority = 254;
        server.priority = 253;

        gcs_buf_conn.size = 8192;
        fc_buf_conn.size = 8192;

        server.simple = 1;
        server.simple_untyped20_pool = 16;
        server.cnode_size_bits = 18;
        server.dma_pool = 0x10000;
        server.dma_pool_paddr = 0x20000000;

        recv.dma_pool = 0x10000;
        recv.dma_pool_paddr = 0x20010000;
    }
}